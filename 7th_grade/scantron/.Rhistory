} else {
answers = c(answers,nextans,nextmult,curtot,pdigs0[i+1])
}
}
if(min(pdigs)>0 && pdigs[1]>a && sum(answers==0)<=2){break}
}
round(2131.14124)
floor(123.4442)
options(scipen=999)
while(T){
adigs = sample(2:9,1)
bdigs = sample(1:9,4,T)
a = adigs[1]
b = bdigs[1]*1000+bdigs[2]*100+bdigs[3]*10+bdigs[4]
p = a*b
p2 = p
pdigs = numeric()
ii = 1
print(p2)
while(p2>0){
p3 = floor(p2/10^ii)*10^ii
print(p3)
pdigs = c((p2-p3)/10^(ii-1),pdigs)
p2 = round(p3)
ii = ii+1
print(p2)
}
answers = c(a,pdigs)
curtot = 0
pdigs0 = c(pdigs,0)
for(i in 1:length(pdigs)){
curtot = curtot*10+pdigs[i]
nextans = floor(curtot/a)
nextmult = nextans*a
nm10 = floor(nextmult/10)
nm1 = nextmult-nm10*10
curtot = curtot-nextmult
ct10 = floor(curtot/10)
ct1 = curtot-ct10
if(nm10>0){
answers = c(answers,nextans,nm10,nm1,curtot,pdigs0[i+1])
} else {
answers = c(answers,nextans,nextmult,curtot,pdigs0[i+1])
}
}
if(min(pdigs)>0 && pdigs[1]>a && sum(answers==0)<=2){break}
}
answers = answers[1:(length(answers)-1)]
answers = c(answers,bdigs)
al = paste0("* ",0:9,collapse="\n")
fal = paste0(rep(al,length(answers)),collapse="\n")
sols = character()
for(i in answers){
sols = c(sols,paste0(1*(i==0:9),collapse=""))
}
sols = paste0(sols,collapse="|")
schs = paste0(rep("schoice",length(answers)),collapse="|")
length(sols)
length(schs)
options(scipen=999)
while(T){
adigs = sample(2:9,1)
bdigs = sample(1:9,4,T)
a = adigs[1]
b = bdigs[1]*1000+bdigs[2]*100+bdigs[3]*10+bdigs[4]
p = a*b
p2 = p
pdigs = numeric()
ii = 1
print(p2)
while(p2>0){
p3 = floor(p2/10^ii)*10^ii
print(p3)
pdigs = c((p2-p3)/10^(ii-1),pdigs)
p2 = round(p3)
ii = ii+1
print(p2)
}
answers = c(a,pdigs)
curtot = 0
pdigs0 = c(pdigs,0)
for(i in 1:length(pdigs)){
curtot = curtot*10+pdigs[i]
nextans = floor(curtot/a)
nextmult = nextans*a
nm10 = floor(nextmult/10)
nm1 = nextmult-nm10*10
curtot = curtot-nextmult
ct10 = floor(curtot/10)
ct1 = curtot-ct10
if(nm10>0){
answers = c(answers,nextans,nm10,nm1,curtot,pdigs0[i+1])
} else {
answers = c(answers,nextans,nextmult,curtot,pdigs0[i+1])
}
}
if(min(pdigs)>0 && pdigs[1]>a && sum(answers==0)<=2){break}
}
answers = answers[1:(length(answers)-1)]
answers = c(answers,bdigs)
al = paste0("* ",0:9,collapse="\n")
fal = paste0(rep(al,length(answers)),collapse="\n")
sols = character()
for(i in answers){
sols = c(sols,paste0(1*(i==0:9),collapse=""))
}
sols = paste0(sols,collapse="|")
schs = paste0(rep("schoice",length(answers)),collapse="|")
length(sols)
length(schs)
options(scipen=999)
while(T){
adigs = sample(2:9,1)
bdigs = sample(1:9,4,T)
a = adigs[1]
b = bdigs[1]*1000+bdigs[2]*100+bdigs[3]*10+bdigs[4]
p = a*b
p2 = p
pdigs = numeric()
ii = 1
print(p2)
while(p2>0){
p3 = round(floor(p2/10^ii)*10^ii)
pdigs = c((p2-p3)/10^(ii-1),pdigs)
p2 = round(p3)
ii = ii+1
print(p2)
}
answers = c(a,pdigs)
curtot = 0
pdigs0 = c(pdigs,0)
for(i in 1:length(pdigs)){
curtot = curtot*10+pdigs[i]
nextans = floor(curtot/a)
nextmult = nextans*a
nm10 = floor(nextmult/10)
nm1 = nextmult-nm10*10
curtot = curtot-nextmult
ct10 = floor(curtot/10)
ct1 = curtot-ct10
if(nm10>0){
answers = c(answers,nextans,nm10,nm1,curtot,pdigs0[i+1])
} else {
answers = c(answers,nextans,nextmult,curtot,pdigs0[i+1])
}
}
if(min(pdigs)>0 && pdigs[1]>a && sum(answers==0)<=2){break}
}
answers = answers[1:(length(answers)-1)]
answers = c(answers,bdigs)
al = paste0("* ",0:9,collapse="\n")
fal = paste0(rep(al,length(answers)),collapse="\n")
sols = character()
for(i in answers){
sols = c(sols,paste0(1*(i==0:9),collapse=""))
}
sols = paste0(sols,collapse="|")
schs = paste0(rep("schoice",length(answers)),collapse="|")
length(sols)
length(schs)
options(scipen=999)
while(T){
adigs = sample(2:9,1)
bdigs = sample(1:9,4,T)
a = adigs[1]
b = bdigs[1]*1000+bdigs[2]*100+bdigs[3]*10+bdigs[4]
p = a*b
p2 = p
pdigs = numeric()
ii = 1
while(p2>0){
p3 = round(floor(p2/10^ii)*10^ii)
pdigs = c((p2-p3)/10^(ii-1),pdigs)
p2 = round(p3)
ii = ii+1
}
answers = c(a,pdigs)
curtot = 0
pdigs0 = c(pdigs,0)
for(i in 1:length(pdigs)){
curtot = curtot*10+pdigs[i]
nextans = floor(curtot/a)
nextmult = nextans*a
nm10 = floor(nextmult/10)
nm1 = nextmult-nm10*10
curtot = curtot-nextmult
ct10 = floor(curtot/10)
ct1 = curtot-ct10
if(nm10>0){
answers = c(answers,nextans,nm10,nm1,curtot,pdigs0[i+1])
} else {
answers = c(answers,nextans,nextmult,curtot,pdigs0[i+1])
}
}
if(min(pdigs)>0 && pdigs[1]>a && sum(answers==0)<=2){break}
}
answers = answers[1:(length(answers)-1)]
answers = c(answers,bdigs)
al = paste0("* ",0:9,collapse="\n")
fal = paste0(rep(al,length(answers)),collapse="\n")
sols = character()
for(i in answers){
sols = c(sols,paste0(1*(i==0:9),collapse=""))
}
print(length(sols))
sols = paste0(sols,collapse="|")
schs = paste0(rep("schoice",length(answers)),collapse="|")
options(scipen=999)
while(T){
adigs = sample(2:9,1)
bdigs = sample(1:9,4,T)
a = adigs[1]
b = bdigs[1]*1000+bdigs[2]*100+bdigs[3]*10+bdigs[4]
p = a*b
p2 = p
pdigs = numeric()
ii = 1
while(p2>0){
p3 = round(floor(p2/10^ii)*10^ii)
pdigs = c((p2-p3)/10^(ii-1),pdigs)
p2 = round(p3)
ii = ii+1
}
answers = c(a,pdigs)
curtot = 0
pdigs0 = c(pdigs,0)
for(i in 1:length(pdigs)){
curtot = curtot*10+pdigs[i]
nextans = floor(curtot/a)
nextmult = nextans*a
nm10 = floor(nextmult/10)
nm1 = nextmult-nm10*10
curtot = curtot-nextmult
ct10 = floor(curtot/10)
ct1 = curtot-ct10
if(nm10>0){
answers = c(answers,nextans,nm10,nm1,curtot,pdigs0[i+1])
} else {
answers = c(answers,nextans,nextmult,curtot,pdigs0[i+1])
}
}
if(min(pdigs)>0 && pdigs[1]>a && sum(answers==0)<=2){break}
}
answers = answers[1:(length(answers)-1)]
answers = c(answers,bdigs)
al = paste0("* ",0:9,collapse="\n")
fal = paste0(rep(al,length(answers)),collapse="\n")
sols = character()
for(i in answers){
sols = c(sols,paste0(1*(i==0:9),collapse=""))
}
print(length(sols))
sols = paste0(sols,collapse="|")
schs = paste0(rep("schoice",length(answers)),collapse="|")
options(scipen=999)
while(T){
adigs = sample(2:9,1)
bdigs = sample(1:9,4,T)
a = adigs[1]
b = bdigs[1]*1000+bdigs[2]*100+bdigs[3]*10+bdigs[4]
p = a*b
p2 = p
pdigs = numeric()
ii = 1
while(p2>0){
p3 = round(floor(p2/10^ii)*10^ii)
pdigs = c((p2-p3)/10^(ii-1),pdigs)
p2 = round(p3)
ii = ii+1
}
answers = c(a,pdigs)
curtot = 0
pdigs0 = c(pdigs,0)
for(i in 1:length(pdigs)){
curtot = curtot*10+pdigs[i]
nextans = floor(curtot/a)
nextmult = nextans*a
nm10 = floor(nextmult/10)
nm1 = nextmult-nm10*10
curtot = curtot-nextmult
ct10 = floor(curtot/10)
ct1 = curtot-ct10
if(nm10>0){
answers = c(answers,nextans,nm10,nm1,curtot,pdigs0[i+1])
} else {
answers = c(answers,nextans,nextmult,curtot,pdigs0[i+1])
}
}
if(min(pdigs)>0 && pdigs[1]>a && sum(answers==0)<=2){break}
}
answers = answers[1:(length(answers)-1)]
answers = c(answers,bdigs)
al = paste0("* ",0:9,collapse="\n")
fal = paste0(rep(al,length(answers)),collapse="\n")
sols = character()
for(i in answers){
sols = c(sols,paste0(1*(i==0:9),collapse=""))
}
print(length(sols))
sols = paste0(sols,collapse="|")
schs = paste0(rep("schoice",length(answers)),collapse="|")
options(scipen=999)
while(T){
adigs = sample(2:9,1)
bdigs = sample(1:9,4,T)
a = adigs[1]
b = bdigs[1]*1000+bdigs[2]*100+bdigs[3]*10+bdigs[4]
p = a*b
p2 = p
pdigs = numeric()
ii = 1
while(p2>0){
p3 = round(floor(p2/10^ii)*10^ii)
pdigs = c((p2-p3)/10^(ii-1),pdigs)
p2 = round(p3)
ii = ii+1
}
answers = c(a,pdigs)
curtot = 0
pdigs0 = c(pdigs,0)
for(i in 1:length(pdigs)){
curtot = curtot*10+pdigs[i]
nextans = floor(curtot/a)
nextmult = nextans*a
nm10 = floor(nextmult/10)
nm1 = nextmult-nm10*10
curtot = curtot-nextmult
ct10 = floor(curtot/10)
ct1 = curtot-ct10
if(nm10>0){
answers = c(answers,nextans,nm10,nm1,curtot,pdigs0[i+1])
} else {
answers = c(answers,nextans,nextmult,curtot,pdigs0[i+1])
}
}
if(min(pdigs)>0 && pdigs[1]>a && sum(answers==0)<=2){break}
}
answers = answers[1:(length(answers)-1)]
answers = c(answers,bdigs)
al = paste0("* ",0:9,collapse="\n")
fal = paste0(rep(al,length(answers)),collapse="\n")
sols = character()
for(i in answers){
sols = c(sols,paste0(1*(i==0:9),collapse=""))
}
print(length(sols))
sols = paste0(sols,collapse="|")
schs = paste0(rep("schoice",length(answers)),collapse="|")
options(scipen=999)
while(T){
adigs = sample(2:9,1)
bdigs = sample(1:9,4,T)
a = adigs[1]
b = bdigs[1]*1000+bdigs[2]*100+bdigs[3]*10+bdigs[4]
p = a*b
p2 = p
pdigs = numeric()
ii = 1
while(p2>0){
p3 = round(floor(p2/10^ii)*10^ii)
pdigs = c((p2-p3)/10^(ii-1),pdigs)
p2 = round(p3)
ii = ii+1
}
answers = c(a,pdigs)
curtot = 0
pdigs0 = c(pdigs,0)
for(i in 1:length(pdigs)){
curtot = curtot*10+pdigs[i]
nextans = floor(curtot/a)
nextmult = nextans*a
nm10 = floor(nextmult/10)
nm1 = nextmult-nm10*10
curtot = curtot-nextmult
ct10 = floor(curtot/10)
ct1 = curtot-ct10
if(nm10>0){
answers = c(answers,nextans,nm10,nm1,curtot,pdigs0[i+1])
} else {
answers = c(answers,nextans,nextmult,curtot,pdigs0[i+1])
}
}
if(min(pdigs)>0 && pdigs[1]>a && sum(answers==0)<=2){break}
}
answers = answers[1:(length(answers)-1)]
answers = c(answers,bdigs)
al = paste0("* ",0:9,collapse="\n")
fal = paste0(rep(al,length(answers)),collapse="\n")
sols = character()
for(i in answers){
sols = c(sols,paste0(1*(i==0:9),collapse=""))
}
print(length(sols))
sols = paste0(sols,collapse="|")
schs = paste0(rep("schoice",length(answers)),collapse="|")
source("~/Documents/chadworley.github.io/a2/u05/exams2canvas_mixed.r", echo=TRUE)
source("~/Documents/chadworley.github.io/a2/u05/exams2html_singles.r", echo=TRUE)
reticulate::source_python('~/Documents/chadworley.github.io/a2/tools/upload_QTI_zip.py')
options(scipen=999)
while(T){
adigs = sample(2:9,1)
bdigs = sample(1:9,4,T)
a = adigs[1]
b = bdigs[1]*1000+bdigs[2]*100+bdigs[3]*10+bdigs[4]
p = a*b
p2 = p
pdigs = numeric()
ii = 1
while(p2>0){
p3 = round(floor(p2/10^ii)*10^ii)
pdigs = c((p2-p3)/10^(ii-1),pdigs)
p2 = round(p3)
ii = ii+1
}
answers = c(a,pdigs)
curtot = 0
pdigs0 = c(pdigs,0)
for(i in 1:length(pdigs)){
curtot = curtot*10+pdigs[i]
nextans = floor(curtot/a)
nextmult = nextans*a
nm10 = floor(nextmult/10)
nm1 = nextmult-nm10*10
curtot = curtot-nextmult
ct10 = floor(curtot/10)
ct1 = curtot-ct10
if(i!=1){
answers = c(answers,nextans,nm10,nm1,curtot,pdigs0[i+1])
} else {
answers = c(answers,nextans,nextmult,curtot,pdigs0[i+1])
}
}
if(min(pdigs)>0 && pdigs[1]>a && sum(answers==0)<=2 && length(answers)==24){break}
}
options(scipen=999)
while(T){
adigs = sample(2:9,1)
bdigs = sample(1:9,4,T)
a = adigs[1]
b = bdigs[1]*1000+bdigs[2]*100+bdigs[3]*10+bdigs[4]
p = a*b
p2 = p
pdigs = numeric()
ii = 1
while(p2>0){
p3 = round(floor(p2/10^ii)*10^ii)
pdigs = c((p2-p3)/10^(ii-1),pdigs)
p2 = round(p3)
ii = ii+1
}
answers = c(a,pdigs)
curtot = 0
pdigs0 = c(pdigs,0)
for(i in 1:length(pdigs)){
curtot = curtot*10+pdigs[i]
nextans = floor(curtot/a)
nextmult = nextans*a
nm10 = floor(nextmult/10)
nm1 = nextmult-nm10*10
curtot = curtot-nextmult
ct10 = floor(curtot/10)
ct1 = curtot-ct10
if(i!=1){
answers = c(answers,nextans,nm10,nm1,curtot,pdigs0[i+1])
} else {
answers = c(answers,nextans,nextmult,curtot,pdigs0[i+1])
}
}
if(min(pdigs)>0 && pdigs[1]>a && sum(answers==0)<=2 && length(answers)==24){break}
}
answers = answers[1:(length(answers)-1)]
answers = c(answers,bdigs)
al = paste0("* ",0:9,collapse="\n")
fal = paste0(rep(al,length(answers)),collapse="\n")
sols = character()
for(i in answers){
sols = c(sols,paste0(1*(i==0:9),collapse=""))
}
sols = paste0(sols,collapse="|")
schs = paste0(rep("schoice",length(answers)),collapse="|")
source("~/Documents/chadworley.github.io/a2/u05/exams2canvas_mixed.r", echo=TRUE)
setwd("~/Documents/chadworley.github.io/ml/arithmetic_2")
source("~/Documents/chadworley.github.io/ml/arithmetic_2/exams2canvas_mixed.r", echo=TRUE)
source("~/Documents/chadworley.github.io/ml/arithmetic_2/exams2canvas_mixed.r", echo=TRUE)
source("~/Documents/chadworley.github.io/ml/arithmetic_2/exams2html_singles.r", echo=TRUE)
source("~/Documents/chadworley.github.io/ml/arithmetic_2/ld_make_exams.R", echo=TRUE)
source("~/Documents/chadworley.github.io/ml/arithmetic_2/ld_make_exams.R", echo=TRUE)
source("~/Documents/chadworley.github.io/ml/arithmetic_2/ld_make_exams.R", echo=TRUE)
source("~/Documents/chadworley.github.io/ml/arithmetic_2/exams2canvas_mixed.r", echo=TRUE)
source("~/Documents/chadworley.github.io/ml/arithmetic_2/exams2canvas_mixed.r", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
setwd("~/Documents/chadworley.github.io/7th_grade/scantron")
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
debugSource("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
debugSource("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
debugSource("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
source("~/Documents/chadworley.github.io/7th_grade/scantron/make_scantron.R", echo=TRUE)
