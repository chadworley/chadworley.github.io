funs = list(f,g,h)
fun12 = sample(1:3,2)
fun1 = fun12[1]
fun2 = fun12[2]
num1 = sample(1:9,1)
num2 = sample(1:9,1)
ans1 = funs[[fun1]][num1]
ans2 = x[num2==funs[[fun2]]]
p2 = c(paste0(x[num1],f[num1]),paste0(x[num1],g[num1]),paste0(x[num1],h[num1]),
paste0(f[num1],x[num1]),paste0(g[num1],x[num1]),paste0(h[num1],x[num1]),
paste0(x[ans2],f[ans2]),paste0(x[ans2],g[ans2]),paste0(x[ans2],h[ans2]),
paste0(f[ans2],x[ans2]),paste0(g[ans2],x[ans2]),paste0(h[ans2],x[ans2]))
p2 = unique(p2)
if(length(unique(c(num1,num2,ans1,ans2)))==4 && length(pairs)>(length(x)*6-7) && length(p2)==12){break}
}
lets = c("f","g","h")
let1 = lets[fun1]
let2 = lets[fun2]
while(T){
fun34 = sample(1:3,2)
x34 = sample(1:9,2)
eo = sample(1:2,2)
wrds = c("even","odd")
mult = c(1,-1)
x3 = x34[1]
x4 = x34[2]
y3 = funs[[fun34[1]]][x3]*mult[eo[1]]
y4 = funs[[fun34[2]]][x4]*mult[eo[2]]
if(length(unique(c(fun12,fun34)))==3 &&
length(unique(c(x34,num1,num2,ans1,ans2)))==6 &&
length(unique(c(x3,x4,y3,y4)))==4){break}
}
let3 = lets[fun34[1]]
let4 = lets[fun34[2]]
tt()
while(T){
x = 1:9
f = sample(1:9)
g = sample(1:9)
h = sample(1:9)
pairs = c(paste0(x,f),paste0(x,g),paste0(x,h),paste0(f,x),paste0(g,x),paste0(h,x))
pairs = unique(pairs)
funs = list(f,g,h)
fun12 = sample(1:3,2)
fun1 = fun12[1]
fun2 = fun12[2]
num1 = sample(1:9,1)
num2 = sample(1:9,1)
ans1 = funs[[fun1]][num1]
ans2 = x[num2==funs[[fun2]]]
p2 = c(paste0(x[num1],f[num1]),paste0(x[num1],g[num1]),paste0(x[num1],h[num1]),
paste0(f[num1],x[num1]),paste0(g[num1],x[num1]),paste0(h[num1],x[num1]),
paste0(x[ans2],f[ans2]),paste0(x[ans2],g[ans2]),paste0(x[ans2],h[ans2]),
paste0(f[ans2],x[ans2]),paste0(g[ans2],x[ans2]),paste0(h[ans2],x[ans2]))
p2 = unique(p2)
if(length(unique(c(num1,num2,ans1,ans2)))==4 && length(pairs)>(length(x)*6-7) && length(p2)==12){break}
}
lets = c("f","g","h")
let1 = lets[fun1]
let2 = lets[fun2]
while(T){
fun34 = sample(1:3,2)
x34 = sample(1:9,2)
eo = sample(1:2,2)
wrds = c("even","odd")
mult = c(1,-1)
x3 = x34[1]
x4 = x34[2]
y3 = funs[[fun34[1]]][x3]*mult[eo[1]]
y4 = funs[[fun34[2]]][x4]*mult[eo[2]]
if(length(unique(c(fun12,fun34)))==3 &&
length(unique(c(x34,num1,num2,ans1,ans2)))==6 &&
length(unique(c(x3,x4,y3,y4)))==4){break}
}
let3 = lets[fun34[1]]
let4 = lets[fun34[2]]
tt()
data <- data.frame(
x,
f,
g,
h
)
colnames(data) = c("$x$","$f(x)$","$g(x)$","$h(x)$")
knitr::kable(data,format = "latex",escape = FALSE,align = 'c')
tt()
data <- data.frame(
x,
f,
g,
h
)
colnames(data) = c("$x$","$f(x)$","$g(x)$","$h(x)$")
knitr::kable(data,format = "latex",escape = FALSE,align = 'c')
tt()
data <- data.frame(
x,
f,
g,
h
)
colnames(data) = c("$x$","$f(x)$","$g(x)$","$h(x)$")
knitr::kable(data,format = "latex",escape = FALSE,align = 'c')
tt()
wo = sample(1:4,1,F,c(1/3,1/6,1/6,1/3))
dg = list(c(3,1),c(3,0),c(2,1),c(2,0))[[wo]]
mlt1 = list(c(-1,-1),c(-1,1),c(1,-1),c(1,1))[[wo]]
cf = sample(c(-1,1),2,T)
tp = c("odd","neither","neither","even")[wo]
mkp = function(cf,dg){
f = paste0("{",cf,"}x^{",dg,"}",collapse="+")
f = gsub("+{-1}x","-x",f,fixed=T)
f = gsub("+{1}x","+x",f,fixed=T)
f = gsub("{-1}x","-x",f,fixed=T)
f = gsub("{1}x","x",f,fixed=T)
f = gsub("+{-","-{",f,fixed=T)
f = gsub("x^{1}","x",f,fixed=T)
f = gsub("+x^{0}","+1",f,fixed=T)
f = gsub("-x^{0}","-1",f,fixed=T)
f = gsub("x^{0}","",f,fixed=T)
f = gsub("{","",f,fixed=T)
f = gsub("}","",f,fixed=T)
return(f)
}
exp1 = mkp(cf,dg)
exp2 = mkp(cf*mlt1,dg)
exp3 = mkp(-cf*mlt1,dg)
wrk2 = gsub("x","(-x)",exp1,fixed = T)
wrk3 = paste0("-\\left(",exp2,"\\right)",collapse="")
explain = c("We see that $p(x)=-p(-x)$ for all $x$ because $p(x)$ and $-p(-x)$ are equivalent polynomials. Thus function $p$ satisfies the criterion for being an odd function.",
"We see that $p(x)\\nequiv p(-x)$ and that $p(x)\\nequiv -p(-x)$, so $p$ is neither even nor odd.",
"We see that $p(x)\\nequiv p(-x)$ and that $p(x)\\nequiv -p(-x)$, so $p$ is neither even nor odd.",
"We see that $p(x)=p(-x)$ for all $x$ because $p(x)$ and $p(-x)$ are equivalent polynomials.  Thus function $p$ satisfies the criterion for being an even function.")[wo]
tt()
wo = sample(1:4,1,F,c(1/3,1/6,1/6,1/3))
dg = list(c(3,1),c(3,0),c(2,1),c(2,0))[[wo]]
mlt1 = list(c(-1,-1),c(-1,1),c(1,-1),c(1,1))[[wo]]
cf = sample(c(-1,1),2,T)
tp = c("odd","neither","neither","even")[wo]
mkp = function(cf,dg){
f = paste0("{",cf,"}x^{",dg,"}",collapse="+")
f = gsub("+{-1}x","-x",f,fixed=T)
f = gsub("+{1}x","+x",f,fixed=T)
f = gsub("{-1}x","-x",f,fixed=T)
f = gsub("{1}x","x",f,fixed=T)
f = gsub("+{-","-{",f,fixed=T)
f = gsub("x^{1}","x",f,fixed=T)
f = gsub("+x^{0}","+1",f,fixed=T)
f = gsub("-x^{0}","-1",f,fixed=T)
f = gsub("x^{0}","",f,fixed=T)
f = gsub("{","",f,fixed=T)
f = gsub("}","",f,fixed=T)
return(f)
}
exp1 = mkp(cf,dg)
exp2 = mkp(cf*mlt1,dg)
exp3 = mkp(-cf*mlt1,dg)
wrk2 = gsub("x","(-x)",exp1,fixed = T)
wrk3 = paste0("-\\left(",exp2,"\\right)",collapse="")
explain = c("We see that $p(x)=-p(-x)$ for all $x$ because $p(x)$ and $-p(-x)$ are equivalent polynomials. Thus function $p$ satisfies the criterion for being an odd function.",
"We see that $p(x)\\nequiv p(-x)$ and that $p(x)\\nequiv -p(-x)$, so $p$ is neither even nor odd.",
"We see that $p(x)\\nequiv p(-x)$ and that $p(x)\\nequiv -p(-x)$, so $p$ is neither even nor odd.",
"We see that $p(x)=p(-x)$ for all $x$ because $p(x)$ and $p(-x)$ are equivalent polynomials.  Thus function $p$ satisfies the criterion for being an even function.")[wo]
tt()
wo = sample(1:4,1,F,c(1/3,1/6,1/6,1/3))
dg = list(c(3,1),c(3,0),c(2,1),c(2,0))[[wo]]
mlt1 = list(c(-1,-1),c(-1,1),c(1,-1),c(1,1))[[wo]]
cf = sample(c(-1,1),2,T)
tp = c("odd","neither","neither","even")[wo]
mkp = function(cf,dg){
f = paste0("{",cf,"}x^{",dg,"}",collapse="+")
f = gsub("+{-1}x","-x",f,fixed=T)
f = gsub("+{1}x","+x",f,fixed=T)
f = gsub("{-1}x","-x",f,fixed=T)
f = gsub("{1}x","x",f,fixed=T)
f = gsub("+{-","-{",f,fixed=T)
f = gsub("x^{1}","x",f,fixed=T)
f = gsub("+x^{0}","+1",f,fixed=T)
f = gsub("-x^{0}","-1",f,fixed=T)
f = gsub("x^{0}","",f,fixed=T)
f = gsub("{","",f,fixed=T)
f = gsub("}","",f,fixed=T)
return(f)
}
exp1 = mkp(cf,dg)
exp2 = mkp(cf*mlt1,dg)
exp3 = mkp(-cf*mlt1,dg)
wrk2 = gsub("x","(-x)",exp1,fixed = T)
wrk3 = paste0("-\\left(",exp2,"\\right)",collapse="")
explain = c("We see that $p(x)=-p(-x)$ for all $x$ because $p(x)$ and $-p(-x)$ are equivalent polynomials. Thus function $p$ satisfies the criterion for being an odd function.",
"We see that $p(x)\\nequiv p(-x)$ and that $p(x)\\nequiv -p(-x)$, so $p$ is neither even nor odd.",
"We see that $p(x)\\nequiv p(-x)$ and that $p(x)\\nequiv -p(-x)$, so $p$ is neither even nor odd.",
"We see that $p(x)=p(-x)$ for all $x$ because $p(x)$ and $p(-x)$ are equivalent polynomials.  Thus function $p$ satisfies the criterion for being an even function.")[wo]
tt()
makem = function(xs,ys){
par(mar=c(0,0.5,1,0.5),pty="s",mfrow=c(1,2))
plot(0,0,"n",xlim=c(-10,10),ylim=c(-10,10),axes=F,ann=F)
dems = seq(-10,10,0.2)
NNN = length(dems)
for(i in -10:10){
points(rep(i,NNN),dems,pch=19,cex=0.02)
points(dems,rep(i,NNN),pch=19,cex=0.02)
}
for(i in seq(-10,10,5)){
lines(c(-10,10),c(i,i),lwd=0.8)
lines(c(i,i),c(-10,10),lwd=0.8)
}
abline(h=0,lwd=2)
abline(v=0,lwd=2)
text(10,0,"x",adj=c(-0.1,1.1))
text(0,10,"y",adj=c(1.1,-0.1))
lines(xs,ys,lwd=3,col="blue")
points(xs,ys,pch=19,cex=0.8,col="blue")
mtext("EVEN",3)
if(params$showsol){
lines(-xs,ys,lwd=3,col="red")
}
plot(0,0,"n",xlim=c(-10,10),ylim=c(-10,10),axes=F,ann=F)
dems = seq(-10,10,0.2)
NNN = length(dems)
for(i in -10:10){
points(rep(i,NNN),dems,pch=19,cex=0.02)
points(dems,rep(i,NNN),pch=19,cex=0.02)
}
for(i in seq(-10,10,5)){
lines(c(-10,10),c(i,i),lwd=0.8)
lines(c(i,i),c(-10,10),lwd=0.8)
}
abline(h=0,lwd=2)
abline(v=0,lwd=2)
text(10,0,"x",adj=c(-0.1,1.1))
text(0,10,"y",adj=c(1.1,-0.1))
lines(xs,ys,lwd=3,col="blue")
points(xs,ys,pch=19,cex=0.8,col="blue")
mtext("ODD",3)
if(params$showsol){
lines(-xs,-ys,lwd=3,col="red")
}
}
while(T){
xs = sort(c(0,sample(1:9,3)))
ys = c(0,sample(1:9,3)*sample(c(-1,1),3,T))
m = diff(ys)/diff(xs)
th = atan(m)
if(max(xs)>5 && min(abs(diff(th)))>pi/10 && max(abs(diff(th)))<(pi-pi/8)){break}
}
makem(xs,ys)
tt()
makem = function(xs,ys){
par(mar=c(0,0.5,1,0.5),pty="s",mfrow=c(1,2))
plot(0,0,"n",xlim=c(-10,10),ylim=c(-10,10),axes=F,ann=F)
dems = seq(-10,10,0.2)
NNN = length(dems)
for(i in -10:10){
points(rep(i,NNN),dems,pch=19,cex=0.02)
points(dems,rep(i,NNN),pch=19,cex=0.02)
}
for(i in seq(-10,10,5)){
lines(c(-10,10),c(i,i),lwd=0.8)
lines(c(i,i),c(-10,10),lwd=0.8)
}
abline(h=0,lwd=2)
abline(v=0,lwd=2)
text(10,0,"x",adj=c(-0.1,1.1))
text(0,10,"y",adj=c(1.1,-0.1))
lines(xs,ys,lwd=3,col="blue")
points(xs,ys,pch=19,cex=0.8,col="blue")
mtext("EVEN",3)
if(params$showsol){
lines(-xs,ys,lwd=3,col="red")
}
plot(0,0,"n",xlim=c(-10,10),ylim=c(-10,10),axes=F,ann=F)
dems = seq(-10,10,0.2)
NNN = length(dems)
for(i in -10:10){
points(rep(i,NNN),dems,pch=19,cex=0.02)
points(dems,rep(i,NNN),pch=19,cex=0.02)
}
for(i in seq(-10,10,5)){
lines(c(-10,10),c(i,i),lwd=0.8)
lines(c(i,i),c(-10,10),lwd=0.8)
}
abline(h=0,lwd=2)
abline(v=0,lwd=2)
text(10,0,"x",adj=c(-0.1,1.1))
text(0,10,"y",adj=c(1.1,-0.1))
lines(xs,ys,lwd=3,col="blue")
points(xs,ys,pch=19,cex=0.8,col="blue")
mtext("ODD",3)
if(params$showsol){
lines(-xs,-ys,lwd=3,col="red")
}
}
while(T){
xs = sort(c(0,sample(1:9,3)))
ys = c(0,sample(1:9,3)*sample(c(-1,1),3,T))
m = diff(ys)/diff(xs)
th = atan(m)
if(max(xs)>5 && min(abs(diff(th)))>pi/10 && max(abs(diff(th)))<(pi-pi/8)){break}
}
makem(xs,ys)
tt()
makem = function(xs,ys){
par(mar=c(0,0.5,1,0.5),pty="s",mfrow=c(1,2))
plot(0,0,"n",xlim=c(-10,10),ylim=c(-10,10),axes=F,ann=F)
dems = seq(-10,10,0.2)
NNN = length(dems)
for(i in -10:10){
points(rep(i,NNN),dems,pch=19,cex=0.02)
points(dems,rep(i,NNN),pch=19,cex=0.02)
}
for(i in seq(-10,10,5)){
lines(c(-10,10),c(i,i),lwd=0.8)
lines(c(i,i),c(-10,10),lwd=0.8)
}
abline(h=0,lwd=2)
abline(v=0,lwd=2)
text(10,0,"x",adj=c(-0.1,1.1))
text(0,10,"y",adj=c(1.1,-0.1))
lines(xs,ys,lwd=3,col="blue")
points(xs,ys,pch=19,cex=0.8,col="blue")
mtext("EVEN",3)
if(params$showsol){
lines(-xs,ys,lwd=3,col="red")
}
plot(0,0,"n",xlim=c(-10,10),ylim=c(-10,10),axes=F,ann=F)
dems = seq(-10,10,0.2)
NNN = length(dems)
for(i in -10:10){
points(rep(i,NNN),dems,pch=19,cex=0.02)
points(dems,rep(i,NNN),pch=19,cex=0.02)
}
for(i in seq(-10,10,5)){
lines(c(-10,10),c(i,i),lwd=0.8)
lines(c(i,i),c(-10,10),lwd=0.8)
}
abline(h=0,lwd=2)
abline(v=0,lwd=2)
text(10,0,"x",adj=c(-0.1,1.1))
text(0,10,"y",adj=c(1.1,-0.1))
lines(xs,ys,lwd=3,col="blue")
points(xs,ys,pch=19,cex=0.8,col="blue")
mtext("ODD",3)
if(params$showsol){
lines(-xs,-ys,lwd=3,col="red")
}
}
while(T){
xs = sort(c(0,sample(1:9,3)))
ys = c(0,sample(1:9,3)*sample(c(-1,1),3,T))
m = diff(ys)/diff(xs)
th = atan(m)
if(max(xs)>5 && min(abs(diff(th)))>pi/10 && max(abs(diff(th)))<(pi-pi/8)){break}
}
makem(xs,ys)
tt()
makem = function(xs,ys){
par(mar=c(0,0.5,1,0.5),pty="s",mfrow=c(1,2))
plot(0,0,"n",xlim=c(-10,10),ylim=c(-10,10),axes=F,ann=F)
dems = seq(-10,10,0.2)
NNN = length(dems)
for(i in -10:10){
points(rep(i,NNN),dems,pch=19,cex=0.02)
points(dems,rep(i,NNN),pch=19,cex=0.02)
}
for(i in seq(-10,10,5)){
lines(c(-10,10),c(i,i),lwd=0.8)
lines(c(i,i),c(-10,10),lwd=0.8)
}
abline(h=0,lwd=2)
abline(v=0,lwd=2)
text(10,0,"x",adj=c(-0.1,1.1))
text(0,10,"y",adj=c(1.1,-0.1))
lines(xs,ys,lwd=3,col="blue")
points(xs,ys,pch=19,cex=0.8,col="blue")
mtext("EVEN",3)
if(params$showsol){
lines(-xs,ys,lwd=3,col="red")
}
plot(0,0,"n",xlim=c(-10,10),ylim=c(-10,10),axes=F,ann=F)
dems = seq(-10,10,0.2)
NNN = length(dems)
for(i in -10:10){
points(rep(i,NNN),dems,pch=19,cex=0.02)
points(dems,rep(i,NNN),pch=19,cex=0.02)
}
for(i in seq(-10,10,5)){
lines(c(-10,10),c(i,i),lwd=0.8)
lines(c(i,i),c(-10,10),lwd=0.8)
}
abline(h=0,lwd=2)
abline(v=0,lwd=2)
text(10,0,"x",adj=c(-0.1,1.1))
text(0,10,"y",adj=c(1.1,-0.1))
lines(xs,ys,lwd=3,col="blue")
points(xs,ys,pch=19,cex=0.8,col="blue")
mtext("ODD",3)
if(params$showsol){
lines(-xs,-ys,lwd=3,col="red")
}
}
while(T){
xs = sort(c(0,sample(1:9,3)))
ys = c(0,sample(1:9,3)*sample(c(-1,1),3,T))
m = diff(ys)/diff(xs)
th = atan(m)
if(max(xs)>5 && min(abs(diff(th)))>pi/10 && max(abs(diff(th)))<(pi-pi/8)){break}
}
makem(xs,ys)
tt()
makem = function(xs,ys){
par(mar=c(0,0.5,1,0.5),pty="s",mfrow=c(1,2))
plot(0,0,"n",xlim=c(-10,10),ylim=c(-10,10),axes=F,ann=F)
dems = seq(-10,10,0.2)
NNN = length(dems)
for(i in -10:10){
points(rep(i,NNN),dems,pch=19,cex=0.02)
points(dems,rep(i,NNN),pch=19,cex=0.02)
}
for(i in seq(-10,10,5)){
lines(c(-10,10),c(i,i),lwd=0.8)
lines(c(i,i),c(-10,10),lwd=0.8)
}
abline(h=0,lwd=2)
abline(v=0,lwd=2)
text(10,0,"x",adj=c(-0.1,1.1))
text(0,10,"y",adj=c(1.1,-0.1))
lines(xs,ys,lwd=3,col="blue")
points(xs,ys,pch=19,cex=0.8,col="blue")
mtext("EVEN",3)
if(params$showsol){
lines(-xs,ys,lwd=3,col="red")
}
plot(0,0,"n",xlim=c(-10,10),ylim=c(-10,10),axes=F,ann=F)
dems = seq(-10,10,0.2)
NNN = length(dems)
for(i in -10:10){
points(rep(i,NNN),dems,pch=19,cex=0.02)
points(dems,rep(i,NNN),pch=19,cex=0.02)
}
for(i in seq(-10,10,5)){
lines(c(-10,10),c(i,i),lwd=0.8)
lines(c(i,i),c(-10,10),lwd=0.8)
}
abline(h=0,lwd=2)
abline(v=0,lwd=2)
text(10,0,"x",adj=c(-0.1,1.1))
text(0,10,"y",adj=c(1.1,-0.1))
lines(xs,ys,lwd=3,col="blue")
points(xs,ys,pch=19,cex=0.8,col="blue")
mtext("ODD",3)
if(params$showsol){
lines(-xs,-ys,lwd=3,col="red")
}
}
while(T){
xs = sort(c(0,sample(1:9,3)))
ys = c(0,sample(1:9,3)*sample(c(-1,1),3,T))
m = diff(ys)/diff(xs)
th = atan(m)
if(max(xs)>5 && min(abs(diff(th)))>pi/10 && max(abs(diff(th)))<(pi-pi/8)){break}
}
makem(xs,ys)
tt()
setwd("~/Documents/chadworley.github.io/algtwo2026/daily_materials/written_exam")
source("~/Documents/chadworley.github.io/algtwo2026/daily_materials/written_exam/make_exams.R", echo=TRUE)
source("~/Documents/chadworley.github.io/algtwo2026/daily_materials/written_exam/make_exams.R", echo=TRUE)
library(kableExtra)
while(T){
wo = sample(c("odd","even","neither"),1)
if(wo != tp7){break}
}
x = -2:2
f = sample(1:9,5)*c(-1,1,0,1,-1)*sample(c(-1,1),1)
if(wo=="odd"){
f[1] = -f[5]
f[2] = -f[4]
} else if(wo=="even"){
f[1] = f[5]
f[2] = f[4]
} else {
dang = sample(c(-1,1),1)
f[1] = f[5]*dang
f[2] = -f[4]*dang
}
blank = rep("$\\phantom{\\cfrac{123123}{1231232}}$",5)
df = data.frame(x,f,blank,blank,blank)
if(params$showsol){
nf = paste0("\\color{red}\\vspace{-5pt}",-f," \\color{black}")
fn = paste0("\\color{red}\\vspace{-5pt}",rev(f),"\\color{black}")
nfn = paste0("\\color{red}\\vspace{-5pt}",-rev(f),"\\color{black}")
df = data.frame(x,f,nf,fn,nfn)
}
colnames(df) = c("$x$","$f(x)$","$-f(x)$","$f(-x)$","$-f(-x)$")
kable(df,align = "c")
print(nf)
source("~/Documents/chadworley.github.io/algtwo2026/daily_materials/written_exam/make_exams.R", echo=TRUE)
setwd("~/Documents/chadworley.github.io/algtwo2026/daily_materials/day009")
source("~/Documents/chadworley.github.io/algtwo2026/daily_materials/day009/exams2canvas_mixed.r", echo=TRUE)
reticulate::source_python('~/Documents/chadworley.github.io/algtwo2026/API_tools/upload_QTI_zip.py')
ord1
ord2
which(ord1==1)
which(ord2==1)
setwd("~/Documents/chadworley.github.io/algtwo2026/daily_materials/day010")
source("~/Documents/chadworley.github.io/algtwo2026/daily_materials/day010/exams2canvas_mixed.r", echo=TRUE)
reticulate::source_python('~/Documents/chadworley.github.io/algtwo2026/API_tools/upload_QTI_zip.py')
setwd("~/Documents/chadworley.github.io/algtwo2026/daily_materials/written_exam")
source("~/Documents/chadworley.github.io/algtwo2026/daily_materials/written_exam/make_exams.R", echo=TRUE)
setwd("~/Documents/chadworley.github.io/algtwo2026/daily_materials/day011")
source("~/Documents/chadworley.github.io/algtwo2026/daily_materials/day011/exams2canvas_mixed.r", echo=TRUE)
reticulate::source_python('~/Documents/chadworley.github.io/algtwo2026/API_tools/upload_QTI_zip.py')
